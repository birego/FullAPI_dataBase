// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


//User Role
enum Role {
  ADMIN
  APPRENANT
  GUEST
}


model Session {
  id      String    @id @default(uuid())
  annee   Int
  ville   String
  Cohorte Cohorte[]

  @@map("session")
}

model Cohorte {
  code        String      @id
  description String
  sessionId   String      @map("session_id")
  session     Session     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  Apprenant   Apprenant[]
  coach       Coach[]

  @@map("cohorte")
}

model Ordinateur {
  tag       String      @id
  modele    String
  fabricant String
  Apprenant Apprenant[]

  @@map("ordinateur")
}

model Apprenant {
  matricule     String      @id @default(uuid())
  nom           String
  prenom        String
  postnom       String?
  dateNaissance String      @map("date_de_naissance")
  lieuNaissance String      @map("lieu_de_naissance")
  codeCohorte   String?     @map("code_cohorte")
  cohorte       Cohorte?    @relation(fields: [codeCohorte], references: [code], onDelete: SetNull)
  tagOrdinateur String?     @map("tag_ordinateur")
  ordinateur    Ordinateur? @relation(fields: [tagOrdinateur], references: [tag], onDelete: SetNull)
  user          User        @relation(fields: [matricule], references: [id], onDelete: Cascade)

  @@map("apprenant")
}

model Coach {
  matricule     String  @id @default(uuid())
  codeCohorte   String  @map("code_cohorte")
  nom           String
  prenom        String
  postnom       String?
  dateNaissance String  @map("date_de_naissance")
  address       String
  email         String
  telephone     String
  cohorte       Cohorte @relation(fields: [codeCohorte], references: [code], onDelete: Cascade)
  user          User    @relation(fields: [matricule], references: [id], onDelete: Cascade)

  @@map("coach")
}

// Ce modele va stocker l'information de l'utilisateur, leur mail et le mot de passe.
model User {
  id        String   @id @default(uuid())
  username  String?
  email     String   @unique
  password  String
  role      Role   
  apprenant Apprenant?
  coach     Coach?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

